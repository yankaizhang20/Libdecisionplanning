// Generated by gencpp from file vehicle_msgs/OccupancyGridUInt8.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_OCCUPANCYGRIDUINT8_H
#define VEHICLE_MSGS_MESSAGE_OCCUPANCYGRIDUINT8_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct OccupancyGridUInt8_
{
  typedef OccupancyGridUInt8_<ContainerAllocator> Type;

  OccupancyGridUInt8_()
    : header()
    , width(0)
    , height(0)
    , resolution(0.0)
    , origin()
    , data()  {
    }
  OccupancyGridUInt8_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , width(0)
    , height(0)
    , resolution(0.0)
    , origin(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> const> ConstPtr;

}; // struct OccupancyGridUInt8_

typedef ::vehicle_msgs::OccupancyGridUInt8_<std::allocator<void> > OccupancyGridUInt8;

typedef boost::shared_ptr< ::vehicle_msgs::OccupancyGridUInt8 > OccupancyGridUInt8Ptr;
typedef boost::shared_ptr< ::vehicle_msgs::OccupancyGridUInt8 const> OccupancyGridUInt8ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator1> & lhs, const ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.resolution == rhs.resolution &&
    lhs.origin == rhs.origin &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator1> & lhs, const ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7211da5396e2c54cdff4c58775ba4f8";
  }

  static const char* value(const ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7211da5396e2c54ULL;
  static const uint64_t static_value2 = 0xcdff4c58775ba4f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/OccupancyGridUInt8";
  }

  static const char* value(const ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Map width [cells]\n"
"uint32 width\n"
"\n"
"# Map height [cells]\n"
"uint32 height\n"
"\n"
"# The map resolution [m/cell]\n"
"float32 resolution\n"
"\n"
"# The origin of the map [m, m, rad].  This is the real-world pose of the\n"
"# cell (0,0) in the map.\n"
"geometry_msgs/Pose origin\n"
"\n"
"# The map data, in row-major order, starting with (0,0).  Occupancy\n"
"# probabilities are in the range [0,100].  Unknown is -1.\n"
"uint8[] data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.resolution);
      stream.next(m.origin);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OccupancyGridUInt8_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::OccupancyGridUInt8_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_OCCUPANCYGRIDUINT8_H
