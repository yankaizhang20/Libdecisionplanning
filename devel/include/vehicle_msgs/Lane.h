// Generated by gencpp from file vehicle_msgs/Lane.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_LANE_H
#define VEHICLE_MSGS_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : header()
    , id(0)
    , dir(0)
    , child_id()
    , father_id()
    , l_lane_id(0)
    , l_change_avbl(false)
    , r_lane_id(0)
    , r_change_avbl(false)
    , behavior()
    , length(0.0)
    , start_point()
    , final_point()
    , points()  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , dir(0)
    , child_id(_alloc)
    , father_id(_alloc)
    , l_lane_id(0)
    , l_change_avbl(false)
    , r_lane_id(0)
    , r_change_avbl(false)
    , behavior(_alloc)
    , length(0.0)
    , start_point(_alloc)
    , final_point(_alloc)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _dir_type;
  _dir_type dir;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _child_id_type;
  _child_id_type child_id;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _father_id_type;
  _father_id_type father_id;

   typedef int32_t _l_lane_id_type;
  _l_lane_id_type l_lane_id;

   typedef uint8_t _l_change_avbl_type;
  _l_change_avbl_type l_change_avbl;

   typedef int32_t _r_lane_id_type;
  _r_lane_id_type r_lane_id;

   typedef uint8_t _r_change_avbl_type;
  _r_change_avbl_type r_change_avbl;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _behavior_type;
  _behavior_type behavior;

   typedef float _length_type;
  _length_type length;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_point_type;
  _start_point_type start_point;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _final_point_type;
  _final_point_type final_point;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::vehicle_msgs::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::vehicle_msgs::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::vehicle_msgs::Lane > LanePtr;
typedef boost::shared_ptr< ::vehicle_msgs::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_msgs::Lane_<ContainerAllocator1> & lhs, const ::vehicle_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.dir == rhs.dir &&
    lhs.child_id == rhs.child_id &&
    lhs.father_id == rhs.father_id &&
    lhs.l_lane_id == rhs.l_lane_id &&
    lhs.l_change_avbl == rhs.l_change_avbl &&
    lhs.r_lane_id == rhs.r_lane_id &&
    lhs.r_change_avbl == rhs.r_change_avbl &&
    lhs.behavior == rhs.behavior &&
    lhs.length == rhs.length &&
    lhs.start_point == rhs.start_point &&
    lhs.final_point == rhs.final_point &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_msgs::Lane_<ContainerAllocator1> & lhs, const ::vehicle_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::Lane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34fa6f4e572e18530e0aa845f18bc92d";
  }

  static const char* value(const ::vehicle_msgs::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34fa6f4e572e1853ULL;
  static const uint64_t static_value2 = 0x0e0aa845f18bc92dULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/Lane";
  }

  static const char* value(const ::vehicle_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int32 id\n"
"int32 dir\n"
"\n"
"int32[] child_id\n"
"int32[] father_id\n"
"\n"
"int32 l_lane_id\n"
"bool l_change_avbl\n"
"\n"
"int32 r_lane_id\n"
"bool r_change_avbl\n"
"\n"
"string behavior\n"
"\n"
"float32 length\n"
"\n"
"geometry_msgs/Point start_point\n"
"geometry_msgs/Point final_point\n"
"\n"
"geometry_msgs/Point[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::vehicle_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.dir);
      stream.next(m.child_id);
      stream.next(m.father_id);
      stream.next(m.l_lane_id);
      stream.next(m.l_change_avbl);
      stream.next(m.r_lane_id);
      stream.next(m.r_change_avbl);
      stream.next(m.behavior);
      stream.next(m.length);
      stream.next(m.start_point);
      stream.next(m.final_point);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::Lane_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "dir: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir);
    s << indent << "child_id[]" << std::endl;
    for (size_t i = 0; i < v.child_id.size(); ++i)
    {
      s << indent << "  child_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.child_id[i]);
    }
    s << indent << "father_id[]" << std::endl;
    for (size_t i = 0; i < v.father_id.size(); ++i)
    {
      s << indent << "  father_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.father_id[i]);
    }
    s << indent << "l_lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lane_id);
    s << indent << "l_change_avbl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.l_change_avbl);
    s << indent << "r_lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lane_id);
    s << indent << "r_change_avbl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r_change_avbl);
    s << indent << "behavior: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.behavior);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "start_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start_point);
    s << indent << "final_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.final_point);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_LANE_H
