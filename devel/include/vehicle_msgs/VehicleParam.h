// Generated by gencpp from file vehicle_msgs/VehicleParam.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_VEHICLEPARAM_H
#define VEHICLE_MSGS_MESSAGE_VEHICLEPARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct VehicleParam_
{
  typedef VehicleParam_<ContainerAllocator> Type;

  VehicleParam_()
    : width(0.0)
    , length(0.0)
    , wheel_base(0.0)
    , front_suspension(0.0)
    , rear_suspension(0.0)
    , max_steering_angle(0.0)
    , d_cr(0.0)
    , max_longitudinal_acc(0.0)
    , max_lateral_acc(0.0)  {
    }
  VehicleParam_(const ContainerAllocator& _alloc)
    : width(0.0)
    , length(0.0)
    , wheel_base(0.0)
    , front_suspension(0.0)
    , rear_suspension(0.0)
    , max_steering_angle(0.0)
    , d_cr(0.0)
    , max_longitudinal_acc(0.0)
    , max_lateral_acc(0.0)  {
  (void)_alloc;
    }



   typedef float _width_type;
  _width_type width;

   typedef float _length_type;
  _length_type length;

   typedef float _wheel_base_type;
  _wheel_base_type wheel_base;

   typedef float _front_suspension_type;
  _front_suspension_type front_suspension;

   typedef float _rear_suspension_type;
  _rear_suspension_type rear_suspension;

   typedef float _max_steering_angle_type;
  _max_steering_angle_type max_steering_angle;

   typedef float _d_cr_type;
  _d_cr_type d_cr;

   typedef float _max_longitudinal_acc_type;
  _max_longitudinal_acc_type max_longitudinal_acc;

   typedef float _max_lateral_acc_type;
  _max_lateral_acc_type max_lateral_acc;





  typedef boost::shared_ptr< ::vehicle_msgs::VehicleParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::VehicleParam_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleParam_

typedef ::vehicle_msgs::VehicleParam_<std::allocator<void> > VehicleParam;

typedef boost::shared_ptr< ::vehicle_msgs::VehicleParam > VehicleParamPtr;
typedef boost::shared_ptr< ::vehicle_msgs::VehicleParam const> VehicleParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::VehicleParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::VehicleParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_msgs::VehicleParam_<ContainerAllocator1> & lhs, const ::vehicle_msgs::VehicleParam_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.length == rhs.length &&
    lhs.wheel_base == rhs.wheel_base &&
    lhs.front_suspension == rhs.front_suspension &&
    lhs.rear_suspension == rhs.rear_suspension &&
    lhs.max_steering_angle == rhs.max_steering_angle &&
    lhs.d_cr == rhs.d_cr &&
    lhs.max_longitudinal_acc == rhs.max_longitudinal_acc &&
    lhs.max_lateral_acc == rhs.max_lateral_acc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_msgs::VehicleParam_<ContainerAllocator1> & lhs, const ::vehicle_msgs::VehicleParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::VehicleParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::VehicleParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::VehicleParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::VehicleParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::VehicleParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::VehicleParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::VehicleParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ae2d3cebe7d183488a1456621a86eab";
  }

  static const char* value(const ::vehicle_msgs::VehicleParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ae2d3cebe7d1834ULL;
  static const uint64_t static_value2 = 0x88a1456621a86eabULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::VehicleParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/VehicleParam";
  }

  static const char* value(const ::vehicle_msgs::VehicleParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::VehicleParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Kinematic\n"
"float32 width\n"
"float32 length\n"
"float32 wheel_base\n"
"float32 front_suspension\n"
"float32 rear_suspension\n"
"float32 max_steering_angle\n"
"\n"
"float32 d_cr # Length between rear axle to center of vehicle\n"
"\n"
"# Dynamic\n"
"float32 max_longitudinal_acc\n"
"float32 max_lateral_acc\n"
;
  }

  static const char* value(const ::vehicle_msgs::VehicleParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::VehicleParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.wheel_base);
      stream.next(m.front_suspension);
      stream.next(m.rear_suspension);
      stream.next(m.max_steering_angle);
      stream.next(m.d_cr);
      stream.next(m.max_longitudinal_acc);
      stream.next(m.max_lateral_acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::VehicleParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::VehicleParam_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "wheel_base: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_base);
    s << indent << "front_suspension: ";
    Printer<float>::stream(s, indent + "  ", v.front_suspension);
    s << indent << "rear_suspension: ";
    Printer<float>::stream(s, indent + "  ", v.rear_suspension);
    s << indent << "max_steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.max_steering_angle);
    s << indent << "d_cr: ";
    Printer<float>::stream(s, indent + "  ", v.d_cr);
    s << indent << "max_longitudinal_acc: ";
    Printer<float>::stream(s, indent + "  ", v.max_longitudinal_acc);
    s << indent << "max_lateral_acc: ";
    Printer<float>::stream(s, indent + "  ", v.max_lateral_acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_VEHICLEPARAM_H
