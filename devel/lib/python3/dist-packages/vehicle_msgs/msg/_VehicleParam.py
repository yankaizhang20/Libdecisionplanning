# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/VehicleParam.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VehicleParam(genpy.Message):
  _md5sum = "6ae2d3cebe7d183488a1456621a86eab"
  _type = "vehicle_msgs/VehicleParam"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Kinematic
float32 width
float32 length
float32 wheel_base
float32 front_suspension
float32 rear_suspension
float32 max_steering_angle

float32 d_cr # Length between rear axle to center of vehicle

# Dynamic
float32 max_longitudinal_acc
float32 max_lateral_acc
"""
  __slots__ = ['width','length','wheel_base','front_suspension','rear_suspension','max_steering_angle','d_cr','max_longitudinal_acc','max_lateral_acc']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       width,length,wheel_base,front_suspension,rear_suspension,max_steering_angle,d_cr,max_longitudinal_acc,max_lateral_acc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleParam, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.width is None:
        self.width = 0.
      if self.length is None:
        self.length = 0.
      if self.wheel_base is None:
        self.wheel_base = 0.
      if self.front_suspension is None:
        self.front_suspension = 0.
      if self.rear_suspension is None:
        self.rear_suspension = 0.
      if self.max_steering_angle is None:
        self.max_steering_angle = 0.
      if self.d_cr is None:
        self.d_cr = 0.
      if self.max_longitudinal_acc is None:
        self.max_longitudinal_acc = 0.
      if self.max_lateral_acc is None:
        self.max_lateral_acc = 0.
    else:
      self.width = 0.
      self.length = 0.
      self.wheel_base = 0.
      self.front_suspension = 0.
      self.rear_suspension = 0.
      self.max_steering_angle = 0.
      self.d_cr = 0.
      self.max_longitudinal_acc = 0.
      self.max_lateral_acc = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.width, _x.length, _x.wheel_base, _x.front_suspension, _x.rear_suspension, _x.max_steering_angle, _x.d_cr, _x.max_longitudinal_acc, _x.max_lateral_acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.width, _x.length, _x.wheel_base, _x.front_suspension, _x.rear_suspension, _x.max_steering_angle, _x.d_cr, _x.max_longitudinal_acc, _x.max_lateral_acc,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.width, _x.length, _x.wheel_base, _x.front_suspension, _x.rear_suspension, _x.max_steering_angle, _x.d_cr, _x.max_longitudinal_acc, _x.max_lateral_acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.width, _x.length, _x.wheel_base, _x.front_suspension, _x.rear_suspension, _x.max_steering_angle, _x.d_cr, _x.max_longitudinal_acc, _x.max_lateral_acc,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
