// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssc_config.proto

#include "ssc_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace planning {
namespace ssc {
constexpr SscPlannerCfg::SscPlannerCfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : velocity_singularity_eps_(0)
  , low_speed_threshold_(0)
  , weight_proximity_(0)
  , is_fitting_only_(false){}
struct SscPlannerCfgDefaultTypeInternal {
  constexpr SscPlannerCfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SscPlannerCfgDefaultTypeInternal() {}
  union {
    SscPlannerCfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SscPlannerCfgDefaultTypeInternal _SscPlannerCfg_default_instance_;
constexpr InflateSteps::InflateSteps(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_p_(0)
  , x_n_(0)
  , y_p_(0)
  , y_n_(0)
  , z_p_(0)
  , z_n_(0){}
struct InflateStepsDefaultTypeInternal {
  constexpr InflateStepsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InflateStepsDefaultTypeInternal() {}
  union {
    InflateSteps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InflateStepsDefaultTypeInternal _InflateSteps_default_instance_;
constexpr DynamicBounds::DynamicBounds(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_lon_vel_(0)
  , min_lon_vel_(0)
  , max_lon_acc_(0)
  , max_lon_dec_(0)
  , max_lat_vel_(0)
  , max_lat_acc_(0){}
struct DynamicBoundsDefaultTypeInternal {
  constexpr DynamicBoundsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DynamicBoundsDefaultTypeInternal() {}
  union {
    DynamicBounds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DynamicBoundsDefaultTypeInternal _DynamicBounds_default_instance_;
constexpr SscMapCfg::SscMapCfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dyn_bounds_(nullptr)
  , infl_steps_(nullptr)
  , map_size_x_(0)
  , map_size_y_(0)
  , map_resl_x_(0)
  , map_resl_y_(0)
  , map_resl_z_(0)
  , map_size_z_(0)
  , max_grids_along_time_(0)
  , s_back_len_(0){}
struct SscMapCfgDefaultTypeInternal {
  constexpr SscMapCfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SscMapCfgDefaultTypeInternal() {}
  union {
    SscMapCfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SscMapCfgDefaultTypeInternal _SscMapCfg_default_instance_;
constexpr Config::Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , planner_cfg_(nullptr)
  , map_cfg_(nullptr){}
struct ConfigDefaultTypeInternal {
  constexpr ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace ssc
}  // namespace planning
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssc_5fconfig_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssc_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssc_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssc_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscPlannerCfg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscPlannerCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscPlannerCfg, velocity_singularity_eps_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscPlannerCfg, low_speed_threshold_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscPlannerCfg, weight_proximity_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscPlannerCfg, is_fitting_only_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::planning::ssc::InflateSteps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::InflateSteps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::ssc::InflateSteps, x_p_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::InflateSteps, x_n_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::InflateSteps, y_p_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::InflateSteps, y_n_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::InflateSteps, z_p_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::InflateSteps, z_n_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::planning::ssc::DynamicBounds, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::DynamicBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::ssc::DynamicBounds, max_lon_vel_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::DynamicBounds, min_lon_vel_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::DynamicBounds, max_lon_acc_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::DynamicBounds, max_lon_dec_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::DynamicBounds, max_lat_vel_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::DynamicBounds, max_lat_acc_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, map_size_x_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, map_size_y_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, map_size_z_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, map_resl_x_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, map_resl_y_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, map_resl_z_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, s_back_len_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, dyn_bounds_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, max_grids_along_time_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::SscMapCfg, infl_steps_),
  2,
  3,
  7,
  4,
  5,
  6,
  9,
  0,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::planning::ssc::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::ssc::Config, name_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::Config, version_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::Config, status_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::Config, planner_cfg_),
  PROTOBUF_FIELD_OFFSET(::planning::ssc::Config, map_cfg_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::planning::ssc::SscPlannerCfg)},
  { 13, 24, sizeof(::planning::ssc::InflateSteps)},
  { 30, 41, sizeof(::planning::ssc::DynamicBounds)},
  { 47, 62, sizeof(::planning::ssc::SscMapCfg)},
  { 72, 82, sizeof(::planning::ssc::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::planning::ssc::_SscPlannerCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::planning::ssc::_InflateSteps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::planning::ssc::_DynamicBounds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::planning::ssc::_SscMapCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::planning::ssc::_Config_default_instance_),
};

const char descriptor_table_protodef_ssc_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ssc_config.proto\022\014planning.ssc\"\201\001\n\rSsc"
  "PlannerCfg\022 \n\030velocity_singularity_eps\030\001"
  " \002(\001\022\033\n\023low_speed_threshold\030\002 \002(\001\022\030\n\020wei"
  "ght_proximity\030\003 \002(\001\022\027\n\017is_fitting_only\030\004"
  " \002(\010\"\\\n\014InflateSteps\022\013\n\003x_p\030\001 \002(\005\022\013\n\003x_n"
  "\030\002 \002(\005\022\013\n\003y_p\030\003 \002(\005\022\013\n\003y_n\030\004 \002(\005\022\013\n\003z_p\030"
  "\005 \002(\005\022\013\n\003z_n\030\006 \002(\005\"\215\001\n\rDynamicBounds\022\023\n\013"
  "max_lon_vel\030\001 \002(\001\022\023\n\013min_lon_vel\030\002 \002(\001\022\023"
  "\n\013max_lon_acc\030\003 \002(\001\022\023\n\013max_lon_dec\030\004 \002(\001"
  "\022\023\n\013max_lat_vel\030\005 \002(\001\022\023\n\013max_lat_acc\030\006 \002"
  "(\001\"\226\002\n\tSscMapCfg\022\022\n\nmap_size_x\030\001 \002(\005\022\022\n\n"
  "map_size_y\030\002 \002(\005\022\022\n\nmap_size_z\030\003 \002(\005\022\022\n\n"
  "map_resl_x\030\004 \002(\001\022\022\n\nmap_resl_y\030\005 \002(\001\022\022\n\n"
  "map_resl_z\030\006 \002(\001\022\022\n\ns_back_len\030\007 \002(\001\022/\n\n"
  "dyn_bounds\030\010 \002(\0132\033.planning.ssc.DynamicB"
  "ounds\022\034\n\024max_grids_along_time\030\t \002(\005\022.\n\ni"
  "nfl_steps\030\n \002(\0132\032.planning.ssc.InflateSt"
  "eps\"\223\001\n\006Config\022\014\n\004name\030\001 \002(\t\022\017\n\007version\030"
  "\002 \002(\t\022\016\n\006status\030\003 \002(\t\0220\n\013planner_cfg\030\004 \002"
  "(\0132\033.planning.ssc.SscPlannerCfg\022(\n\007map_c"
  "fg\030\005 \002(\0132\027.planning.ssc.SscMapCfg"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssc_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssc_5fconfig_2eproto = {
  false, false, 833, descriptor_table_protodef_ssc_5fconfig_2eproto, "ssc_config.proto", 
  &descriptor_table_ssc_5fconfig_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_ssc_5fconfig_2eproto::offsets,
  file_level_metadata_ssc_5fconfig_2eproto, file_level_enum_descriptors_ssc_5fconfig_2eproto, file_level_service_descriptors_ssc_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_ssc_5fconfig_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssc_5fconfig_2eproto);
  return descriptor_table_ssc_5fconfig_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ssc_5fconfig_2eproto(&descriptor_table_ssc_5fconfig_2eproto);
namespace planning {
namespace ssc {

// ===================================================================

class SscPlannerCfg::_Internal {
 public:
  using HasBits = decltype(std::declval<SscPlannerCfg>()._has_bits_);
  static void set_has_velocity_singularity_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight_proximity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_fitting_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

SscPlannerCfg::SscPlannerCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:planning.ssc.SscPlannerCfg)
}
SscPlannerCfg::SscPlannerCfg(const SscPlannerCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&velocity_singularity_eps_, &from.velocity_singularity_eps_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_fitting_only_) -
    reinterpret_cast<char*>(&velocity_singularity_eps_)) + sizeof(is_fitting_only_));
  // @@protoc_insertion_point(copy_constructor:planning.ssc.SscPlannerCfg)
}

void SscPlannerCfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&velocity_singularity_eps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_fitting_only_) -
    reinterpret_cast<char*>(&velocity_singularity_eps_)) + sizeof(is_fitting_only_));
}

SscPlannerCfg::~SscPlannerCfg() {
  // @@protoc_insertion_point(destructor:planning.ssc.SscPlannerCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SscPlannerCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SscPlannerCfg::ArenaDtor(void* object) {
  SscPlannerCfg* _this = reinterpret_cast< SscPlannerCfg* >(object);
  (void)_this;
}
void SscPlannerCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SscPlannerCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SscPlannerCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ssc.SscPlannerCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&velocity_singularity_eps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_fitting_only_) -
        reinterpret_cast<char*>(&velocity_singularity_eps_)) + sizeof(is_fitting_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SscPlannerCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double velocity_singularity_eps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_velocity_singularity_eps(&has_bits);
          velocity_singularity_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double low_speed_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_low_speed_threshold(&has_bits);
          low_speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double weight_proximity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_weight_proximity(&has_bits);
          weight_proximity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required bool is_fitting_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_fitting_only(&has_bits);
          is_fitting_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SscPlannerCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.ssc.SscPlannerCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double velocity_singularity_eps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_velocity_singularity_eps(), target);
  }

  // required double low_speed_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_low_speed_threshold(), target);
  }

  // required double weight_proximity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_proximity(), target);
  }

  // required bool is_fitting_only = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_fitting_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ssc.SscPlannerCfg)
  return target;
}

size_t SscPlannerCfg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:planning.ssc.SscPlannerCfg)
  size_t total_size = 0;

  if (_internal_has_velocity_singularity_eps()) {
    // required double velocity_singularity_eps = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_low_speed_threshold()) {
    // required double low_speed_threshold = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_weight_proximity()) {
    // required double weight_proximity = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_is_fitting_only()) {
    // required bool is_fitting_only = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SscPlannerCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ssc.SscPlannerCfg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double velocity_singularity_eps = 1;
    total_size += 1 + 8;

    // required double low_speed_threshold = 2;
    total_size += 1 + 8;

    // required double weight_proximity = 3;
    total_size += 1 + 8;

    // required bool is_fitting_only = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SscPlannerCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ssc.SscPlannerCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const SscPlannerCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SscPlannerCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ssc.SscPlannerCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ssc.SscPlannerCfg)
    MergeFrom(*source);
  }
}

void SscPlannerCfg::MergeFrom(const SscPlannerCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ssc.SscPlannerCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      velocity_singularity_eps_ = from.velocity_singularity_eps_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_speed_threshold_ = from.low_speed_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_proximity_ = from.weight_proximity_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_fitting_only_ = from.is_fitting_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SscPlannerCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ssc.SscPlannerCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SscPlannerCfg::CopyFrom(const SscPlannerCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ssc.SscPlannerCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SscPlannerCfg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SscPlannerCfg::InternalSwap(SscPlannerCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SscPlannerCfg, is_fitting_only_)
      + sizeof(SscPlannerCfg::is_fitting_only_)
      - PROTOBUF_FIELD_OFFSET(SscPlannerCfg, velocity_singularity_eps_)>(
          reinterpret_cast<char*>(&velocity_singularity_eps_),
          reinterpret_cast<char*>(&other->velocity_singularity_eps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SscPlannerCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InflateSteps::_Internal {
 public:
  using HasBits = decltype(std::declval<InflateSteps>()._has_bits_);
  static void set_has_x_p(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_p(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_n(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z_p(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z_n(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

InflateSteps::InflateSteps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:planning.ssc.InflateSteps)
}
InflateSteps::InflateSteps(const InflateSteps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_p_, &from.x_p_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_n_) -
    reinterpret_cast<char*>(&x_p_)) + sizeof(z_n_));
  // @@protoc_insertion_point(copy_constructor:planning.ssc.InflateSteps)
}

void InflateSteps::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_p_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_n_) -
    reinterpret_cast<char*>(&x_p_)) + sizeof(z_n_));
}

InflateSteps::~InflateSteps() {
  // @@protoc_insertion_point(destructor:planning.ssc.InflateSteps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InflateSteps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InflateSteps::ArenaDtor(void* object) {
  InflateSteps* _this = reinterpret_cast< InflateSteps* >(object);
  (void)_this;
}
void InflateSteps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InflateSteps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InflateSteps::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ssc.InflateSteps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_p_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_n_) -
        reinterpret_cast<char*>(&x_p_)) + sizeof(z_n_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InflateSteps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 x_p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x_p(&has_bits);
          x_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 x_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x_n(&has_bits);
          x_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y_p = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y_p(&has_bits);
          y_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y_n = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_y_n(&has_bits);
          y_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 z_p = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_z_p(&has_bits);
          z_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 z_n = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_z_n(&has_bits);
          z_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InflateSteps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.ssc.InflateSteps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x_p = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x_p(), target);
  }

  // required int32 x_n = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x_n(), target);
  }

  // required int32 y_p = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y_p(), target);
  }

  // required int32 y_n = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_y_n(), target);
  }

  // required int32 z_p = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_z_p(), target);
  }

  // required int32 z_n = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_z_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ssc.InflateSteps)
  return target;
}

size_t InflateSteps::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:planning.ssc.InflateSteps)
  size_t total_size = 0;

  if (_internal_has_x_p()) {
    // required int32 x_p = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_p());
  }

  if (_internal_has_x_n()) {
    // required int32 x_n = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_n());
  }

  if (_internal_has_y_p()) {
    // required int32 y_p = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_p());
  }

  if (_internal_has_y_n()) {
    // required int32 y_n = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_n());
  }

  if (_internal_has_z_p()) {
    // required int32 z_p = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z_p());
  }

  if (_internal_has_z_n()) {
    // required int32 z_n = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z_n());
  }

  return total_size;
}
size_t InflateSteps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ssc.InflateSteps)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 x_p = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_p());

    // required int32 x_n = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_n());

    // required int32 y_p = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_p());

    // required int32 y_n = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_n());

    // required int32 z_p = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z_p());

    // required int32 z_n = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z_n());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InflateSteps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ssc.InflateSteps)
  GOOGLE_DCHECK_NE(&from, this);
  const InflateSteps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InflateSteps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ssc.InflateSteps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ssc.InflateSteps)
    MergeFrom(*source);
  }
}

void InflateSteps::MergeFrom(const InflateSteps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ssc.InflateSteps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_p_ = from.x_p_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_n_ = from.x_n_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_p_ = from.y_p_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_n_ = from.y_n_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_p_ = from.z_p_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_n_ = from.z_n_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InflateSteps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ssc.InflateSteps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InflateSteps::CopyFrom(const InflateSteps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ssc.InflateSteps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InflateSteps::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InflateSteps::InternalSwap(InflateSteps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InflateSteps, z_n_)
      + sizeof(InflateSteps::z_n_)
      - PROTOBUF_FIELD_OFFSET(InflateSteps, x_p_)>(
          reinterpret_cast<char*>(&x_p_),
          reinterpret_cast<char*>(&other->x_p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InflateSteps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DynamicBounds::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicBounds>()._has_bits_);
  static void set_has_max_lon_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_lon_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_lon_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_lon_dec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_lat_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_lat_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

DynamicBounds::DynamicBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:planning.ssc.DynamicBounds)
}
DynamicBounds::DynamicBounds(const DynamicBounds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_lon_vel_, &from.max_lon_vel_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_lat_acc_) -
    reinterpret_cast<char*>(&max_lon_vel_)) + sizeof(max_lat_acc_));
  // @@protoc_insertion_point(copy_constructor:planning.ssc.DynamicBounds)
}

void DynamicBounds::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_lon_vel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_lat_acc_) -
    reinterpret_cast<char*>(&max_lon_vel_)) + sizeof(max_lat_acc_));
}

DynamicBounds::~DynamicBounds() {
  // @@protoc_insertion_point(destructor:planning.ssc.DynamicBounds)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DynamicBounds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DynamicBounds::ArenaDtor(void* object) {
  DynamicBounds* _this = reinterpret_cast< DynamicBounds* >(object);
  (void)_this;
}
void DynamicBounds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DynamicBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ssc.DynamicBounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&max_lon_vel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_lat_acc_) -
        reinterpret_cast<char*>(&max_lon_vel_)) + sizeof(max_lat_acc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicBounds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double max_lon_vel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_lon_vel(&has_bits);
          max_lon_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double min_lon_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min_lon_vel(&has_bits);
          min_lon_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double max_lon_acc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_lon_acc(&has_bits);
          max_lon_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double max_lon_dec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_lon_dec(&has_bits);
          max_lon_dec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double max_lat_vel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_lat_vel(&has_bits);
          max_lat_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double max_lat_acc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_max_lat_acc(&has_bits);
          max_lat_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicBounds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.ssc.DynamicBounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double max_lon_vel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_lon_vel(), target);
  }

  // required double min_lon_vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_lon_vel(), target);
  }

  // required double max_lon_acc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_lon_acc(), target);
  }

  // required double max_lon_dec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_lon_dec(), target);
  }

  // required double max_lat_vel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_lat_vel(), target);
  }

  // required double max_lat_acc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_lat_acc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ssc.DynamicBounds)
  return target;
}

size_t DynamicBounds::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:planning.ssc.DynamicBounds)
  size_t total_size = 0;

  if (_internal_has_max_lon_vel()) {
    // required double max_lon_vel = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_min_lon_vel()) {
    // required double min_lon_vel = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_max_lon_acc()) {
    // required double max_lon_acc = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_max_lon_dec()) {
    // required double max_lon_dec = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_max_lat_vel()) {
    // required double max_lat_vel = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_max_lat_acc()) {
    // required double max_lat_acc = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DynamicBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ssc.DynamicBounds)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required double max_lon_vel = 1;
    total_size += 1 + 8;

    // required double min_lon_vel = 2;
    total_size += 1 + 8;

    // required double max_lon_acc = 3;
    total_size += 1 + 8;

    // required double max_lon_dec = 4;
    total_size += 1 + 8;

    // required double max_lat_vel = 5;
    total_size += 1 + 8;

    // required double max_lat_acc = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicBounds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ssc.DynamicBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicBounds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicBounds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ssc.DynamicBounds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ssc.DynamicBounds)
    MergeFrom(*source);
  }
}

void DynamicBounds::MergeFrom(const DynamicBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ssc.DynamicBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      max_lon_vel_ = from.max_lon_vel_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_lon_vel_ = from.min_lon_vel_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_lon_acc_ = from.max_lon_acc_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_lon_dec_ = from.max_lon_dec_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_lat_vel_ = from.max_lat_vel_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_lat_acc_ = from.max_lat_acc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DynamicBounds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ssc.DynamicBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicBounds::CopyFrom(const DynamicBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ssc.DynamicBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicBounds::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DynamicBounds::InternalSwap(DynamicBounds* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicBounds, max_lat_acc_)
      + sizeof(DynamicBounds::max_lat_acc_)
      - PROTOBUF_FIELD_OFFSET(DynamicBounds, max_lon_vel_)>(
          reinterpret_cast<char*>(&max_lon_vel_),
          reinterpret_cast<char*>(&other->max_lon_vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicBounds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SscMapCfg::_Internal {
 public:
  using HasBits = decltype(std::declval<SscMapCfg>()._has_bits_);
  static void set_has_map_size_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_size_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_map_size_z(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_map_resl_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_map_resl_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_map_resl_z(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_s_back_len(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::planning::ssc::DynamicBounds& dyn_bounds(const SscMapCfg* msg);
  static void set_has_dyn_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_grids_along_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::planning::ssc::InflateSteps& infl_steps(const SscMapCfg* msg);
  static void set_has_infl_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

const ::planning::ssc::DynamicBounds&
SscMapCfg::_Internal::dyn_bounds(const SscMapCfg* msg) {
  return *msg->dyn_bounds_;
}
const ::planning::ssc::InflateSteps&
SscMapCfg::_Internal::infl_steps(const SscMapCfg* msg) {
  return *msg->infl_steps_;
}
SscMapCfg::SscMapCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:planning.ssc.SscMapCfg)
}
SscMapCfg::SscMapCfg(const SscMapCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dyn_bounds()) {
    dyn_bounds_ = new ::planning::ssc::DynamicBounds(*from.dyn_bounds_);
  } else {
    dyn_bounds_ = nullptr;
  }
  if (from._internal_has_infl_steps()) {
    infl_steps_ = new ::planning::ssc::InflateSteps(*from.infl_steps_);
  } else {
    infl_steps_ = nullptr;
  }
  ::memcpy(&map_size_x_, &from.map_size_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_back_len_) -
    reinterpret_cast<char*>(&map_size_x_)) + sizeof(s_back_len_));
  // @@protoc_insertion_point(copy_constructor:planning.ssc.SscMapCfg)
}

void SscMapCfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dyn_bounds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&s_back_len_) -
    reinterpret_cast<char*>(&dyn_bounds_)) + sizeof(s_back_len_));
}

SscMapCfg::~SscMapCfg() {
  // @@protoc_insertion_point(destructor:planning.ssc.SscMapCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SscMapCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dyn_bounds_;
  if (this != internal_default_instance()) delete infl_steps_;
}

void SscMapCfg::ArenaDtor(void* object) {
  SscMapCfg* _this = reinterpret_cast< SscMapCfg* >(object);
  (void)_this;
}
void SscMapCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SscMapCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SscMapCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ssc.SscMapCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dyn_bounds_ != nullptr);
      dyn_bounds_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(infl_steps_ != nullptr);
      infl_steps_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&map_size_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_size_z_) -
        reinterpret_cast<char*>(&map_size_x_)) + sizeof(map_size_z_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&max_grids_along_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&s_back_len_) -
        reinterpret_cast<char*>(&max_grids_along_time_)) + sizeof(s_back_len_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SscMapCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 map_size_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_map_size_x(&has_bits);
          map_size_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 map_size_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_map_size_y(&has_bits);
          map_size_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 map_size_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_map_size_z(&has_bits);
          map_size_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double map_resl_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_map_resl_x(&has_bits);
          map_resl_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double map_resl_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_map_resl_y(&has_bits);
          map_resl_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double map_resl_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_map_resl_z(&has_bits);
          map_resl_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double s_back_len = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_s_back_len(&has_bits);
          s_back_len_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required .planning.ssc.DynamicBounds dyn_bounds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dyn_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 max_grids_along_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_grids_along_time(&has_bits);
          max_grids_along_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .planning.ssc.InflateSteps infl_steps = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_infl_steps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SscMapCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.ssc.SscMapCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 map_size_x = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_size_x(), target);
  }

  // required int32 map_size_y = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_size_y(), target);
  }

  // required int32 map_size_z = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_map_size_z(), target);
  }

  // required double map_resl_x = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_map_resl_x(), target);
  }

  // required double map_resl_y = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_map_resl_y(), target);
  }

  // required double map_resl_z = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_map_resl_z(), target);
  }

  // required double s_back_len = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s_back_len(), target);
  }

  // required .planning.ssc.DynamicBounds dyn_bounds = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dyn_bounds(this), target, stream);
  }

  // required int32 max_grids_along_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_grids_along_time(), target);
  }

  // required .planning.ssc.InflateSteps infl_steps = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::infl_steps(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ssc.SscMapCfg)
  return target;
}

size_t SscMapCfg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:planning.ssc.SscMapCfg)
  size_t total_size = 0;

  if (_internal_has_dyn_bounds()) {
    // required .planning.ssc.DynamicBounds dyn_bounds = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dyn_bounds_);
  }

  if (_internal_has_infl_steps()) {
    // required .planning.ssc.InflateSteps infl_steps = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *infl_steps_);
  }

  if (_internal_has_map_size_x()) {
    // required int32 map_size_x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_size_x());
  }

  if (_internal_has_map_size_y()) {
    // required int32 map_size_y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_size_y());
  }

  if (_internal_has_map_resl_x()) {
    // required double map_resl_x = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_map_resl_y()) {
    // required double map_resl_y = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_map_resl_z()) {
    // required double map_resl_z = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_map_size_z()) {
    // required int32 map_size_z = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_size_z());
  }

  if (_internal_has_max_grids_along_time()) {
    // required int32 max_grids_along_time = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_grids_along_time());
  }

  if (_internal_has_s_back_len()) {
    // required double s_back_len = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SscMapCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ssc.SscMapCfg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .planning.ssc.DynamicBounds dyn_bounds = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dyn_bounds_);

    // required .planning.ssc.InflateSteps infl_steps = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *infl_steps_);

    // required int32 map_size_x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_size_x());

    // required int32 map_size_y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_size_y());

    // required double map_resl_x = 4;
    total_size += 1 + 8;

    // required double map_resl_y = 5;
    total_size += 1 + 8;

    // required double map_resl_z = 6;
    total_size += 1 + 8;

    // required int32 map_size_z = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_size_z());

    // required int32 max_grids_along_time = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_grids_along_time());

    // required double s_back_len = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SscMapCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ssc.SscMapCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const SscMapCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SscMapCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ssc.SscMapCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ssc.SscMapCfg)
    MergeFrom(*source);
  }
}

void SscMapCfg::MergeFrom(const SscMapCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ssc.SscMapCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dyn_bounds()->::planning::ssc::DynamicBounds::MergeFrom(from._internal_dyn_bounds());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_infl_steps()->::planning::ssc::InflateSteps::MergeFrom(from._internal_infl_steps());
    }
    if (cached_has_bits & 0x00000004u) {
      map_size_x_ = from.map_size_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      map_size_y_ = from.map_size_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      map_resl_x_ = from.map_resl_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      map_resl_y_ = from.map_resl_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      map_resl_z_ = from.map_resl_z_;
    }
    if (cached_has_bits & 0x00000080u) {
      map_size_z_ = from.map_size_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      max_grids_along_time_ = from.max_grids_along_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      s_back_len_ = from.s_back_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SscMapCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ssc.SscMapCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SscMapCfg::CopyFrom(const SscMapCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ssc.SscMapCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SscMapCfg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_dyn_bounds()) {
    if (!dyn_bounds_->IsInitialized()) return false;
  }
  if (_internal_has_infl_steps()) {
    if (!infl_steps_->IsInitialized()) return false;
  }
  return true;
}

void SscMapCfg::InternalSwap(SscMapCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SscMapCfg, s_back_len_)
      + sizeof(SscMapCfg::s_back_len_)
      - PROTOBUF_FIELD_OFFSET(SscMapCfg, dyn_bounds_)>(
          reinterpret_cast<char*>(&dyn_bounds_),
          reinterpret_cast<char*>(&other->dyn_bounds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SscMapCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::planning::ssc::SscPlannerCfg& planner_cfg(const Config* msg);
  static void set_has_planner_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::planning::ssc::SscMapCfg& map_cfg(const Config* msg);
  static void set_has_map_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::planning::ssc::SscPlannerCfg&
Config::_Internal::planner_cfg(const Config* msg) {
  return *msg->planner_cfg_;
}
const ::planning::ssc::SscMapCfg&
Config::_Internal::map_cfg(const Config* msg) {
  return *msg->map_cfg_;
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:planning.ssc.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  if (from._internal_has_planner_cfg()) {
    planner_cfg_ = new ::planning::ssc::SscPlannerCfg(*from.planner_cfg_);
  } else {
    planner_cfg_ = nullptr;
  }
  if (from._internal_has_map_cfg()) {
    map_cfg_ = new ::planning::ssc::SscMapCfg(*from.map_cfg_);
  } else {
    map_cfg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:planning.ssc.Config)
}

void Config::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&planner_cfg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&map_cfg_) -
    reinterpret_cast<char*>(&planner_cfg_)) + sizeof(map_cfg_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:planning.ssc.Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete planner_cfg_;
  if (this != internal_default_instance()) delete map_cfg_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ssc.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(planner_cfg_ != nullptr);
      planner_cfg_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(map_cfg_ != nullptr);
      map_cfg_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "planning.ssc.Config.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "planning.ssc.Config.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "planning.ssc.Config.status");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .planning.ssc.SscPlannerCfg planner_cfg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_planner_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .planning.ssc.SscMapCfg map_cfg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.ssc.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "planning.ssc.Config.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "planning.ssc.Config.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // required string status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "planning.ssc.Config.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  // required .planning.ssc.SscPlannerCfg planner_cfg = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::planner_cfg(this), target, stream);
  }

  // required .planning.ssc.SscMapCfg map_cfg = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::map_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ssc.Config)
  return target;
}

size_t Config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:planning.ssc.Config)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_version()) {
    // required string version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (_internal_has_status()) {
    // required string status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (_internal_has_planner_cfg()) {
    // required .planning.ssc.SscPlannerCfg planner_cfg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planner_cfg_);
  }

  if (_internal_has_map_cfg()) {
    // required .planning.ssc.SscMapCfg map_cfg = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_cfg_);
  }

  return total_size;
}
size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ssc.Config)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());

    // required string status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());

    // required .planning.ssc.SscPlannerCfg planner_cfg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planner_cfg_);

    // required .planning.ssc.SscMapCfg map_cfg = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_cfg_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ssc.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ssc.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ssc.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ssc.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_planner_cfg()->::planning::ssc::SscPlannerCfg::MergeFrom(from._internal_planner_cfg());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_map_cfg()->::planning::ssc::SscMapCfg::MergeFrom(from._internal_map_cfg());
    }
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ssc.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ssc.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_planner_cfg()) {
    if (!planner_cfg_->IsInitialized()) return false;
  }
  if (_internal_has_map_cfg()) {
    if (!map_cfg_->IsInitialized()) return false;
  }
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, map_cfg_)
      + sizeof(Config::map_cfg_)
      - PROTOBUF_FIELD_OFFSET(Config, planner_cfg_)>(
          reinterpret_cast<char*>(&planner_cfg_),
          reinterpret_cast<char*>(&other->planner_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ssc
}  // namespace planning
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::planning::ssc::SscPlannerCfg* Arena::CreateMaybeMessage< ::planning::ssc::SscPlannerCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::planning::ssc::SscPlannerCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::ssc::InflateSteps* Arena::CreateMaybeMessage< ::planning::ssc::InflateSteps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::planning::ssc::InflateSteps >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::ssc::DynamicBounds* Arena::CreateMaybeMessage< ::planning::ssc::DynamicBounds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::planning::ssc::DynamicBounds >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::ssc::SscMapCfg* Arena::CreateMaybeMessage< ::planning::ssc::SscMapCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::planning::ssc::SscMapCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::ssc::Config* Arena::CreateMaybeMessage< ::planning::ssc::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::planning::ssc::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
